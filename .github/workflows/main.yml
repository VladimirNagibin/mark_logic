name: Main mark_logic workflow

on:
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 flake8-html wemake-python-styleguide mypy

    # Проверка wemake-python-styleguide
    - name: Lint with wemake-python-styleguide
      run: |
        cd mark && mkdir flake8-report-${{ matrix.python-version }}
        flake8 src \
          --format=html \
          --htmldir=flake8-report-${{ matrix.python-version }} \
          --count \
          --max-complexity=10 \
          --max-line-length=79 \
          --per-file-ignores="src/migration/versions/*: WPS102" \
          --statistics \
          --ignore WPS115,WPS601,WPS211,WPS230,WPS404
          # --exit-zero

    # HTML-отчет
    - name: Publish Flake8 HTML Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: flake8-report-${{ matrix.python-version }}
        path: mark/flake8-report-${{ matrix.python-version }}/

    - name: Check through mypy
      run: |
        cd mark
        mypy src \
          --ignore-missing-imports \
          --show-error-codes \
          --pretty \
          --strict

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry==2.1.1
        cd mark && poetry config virtualenvs.create false
        poetry install --without dev --no-interaction --no-ansi
    - name: Tests
      run: |
        cd mark && pytest src/tests

  build_mark_and_push_to_docker_hub:
    name: Push mark Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./mark/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/mark_logic:latest
